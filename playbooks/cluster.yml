---
- hosts: gluster
  become: yes

  vars_files:
      - vars.yml


  tasks:

    - name: Generate /etc/hosts
      template:
        src=hosts.j2
        dest=/etc/hosts
 
    - name: install clustering software
      yum: name={{ item }} state=present
      with_items:
        - "pcs"
        - "fence-agents-all"

    - name: Determine if firewalld service masked
      command: systemctl is-enabled firewalld
      register: os_firewall_firewalld_masked_output
      changed_when: false
      failed_when: false

    - name: Unmask firewalld service
      command: systemctl unmask firewalld
      when: os_firewall_firewalld_masked_output.stdout == "masked"

    - name: Start and enable firewalld service
      service:
        name: firewalld
        state: restarted
        enabled: yes
      register: result


    - name: enable Firewall to allow HA traffic
      shell: firewall-cmd --permanent --add-service=high-availability
      when: result.changed
      ignore_errors: yes


    - name: add Firewall to allow HA traffic
      shell: firewall-cmd --add-service=high-availability
      when: result.changed
      ignore_errors: yes

    - name: change password of hacluster
      user:
        name: hacluster
        state: present
        password: clustering | password_hash('sha512', ansible_hostname)

    - name: start the HA process
      service:
         name: pcsd.service
         state: started

    - name: enable HA process 
      service:
         name: pcsd.service
         enabled: yes

#    - name: Authorize cluster nodes
#      pcs_auth: fqdn="gluster1 gluster2 gluster3" username=hacluster password=clustering
#      run_once: true


    - name: Authorize cluster nodes
      pcs_auth: fqdn={{ hostvars[item]['ansible_fqdn'].split('.')[0] }} username={{ cluster_user }} password={{ cluster_user_pass }}
      run_once: true
      with_items: play_hosts
  
    - name: Setup cluster
      command: >
        pcs cluster setup --name {{ cluster_name }} --start
        {% for host in play_hosts %}
        {% set short_name = hostvars[host]['ansible_fqdn'].split('.') %}
        {{ short_name[0] }}
        {% endfor %}
      run_once: true
      args:
        creates: /var/lib/pacemaker/cib/cib.xml

    - name: Start cluster services on all nodes
      service: name={{ item }} state=started
      with_items:
         - pacemaker 
         - corosync

    - name: Enable cluster services on boot
      service: name={{ item }} enabled=yes
      when: cluster_enable_service == true
      with_items:
        - pacemaker 
        - corosync


